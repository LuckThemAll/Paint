unit UTools;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, UFigures, Graphics, UScale, math, ExtCtrls, Spin, StdCtrls,
   FPCanvas, Controls;
type

  TTool = class
    FIcon: String;
    Figure: TFigure;
    PenColor: TColor;
    BrushColor: TColor;
    Thickness: Integer;
    BrushStyle: TFPBrushStyle;
    PenStyle: TFPPenStyle;
    NumberOfAngles: integer;
    ParametersAvailable: Boolean;
    WidthEdit: TSpinEdit;
    AnglesEdit: TSpinEdit;
    TextLabel: TLabel;
    BrushStyleCombobox: TComboBox;
    PenStyleCombobox: TComboBox;
    function GetFigure: TFigure;
    procedure SetWidthProperty(APanel: TPanel);
    procedure SetBrushStyleProperty(APanel: TPanel);
    procedure SetPenStyleProperty(APanel: TPanel);
    procedure SetNumbefOfAngles(APanel: TPanel);
    procedure SetLabel(APanel: TPanel; ACaption: string);
    procedure WidthEditChange(Sender: TObject);
    procedure BrushStyleComboboxChange(Sender: TObject);
    procedure PenStyleComboboxChange(Sender: TObject);
    procedure AnglesEditChange(Sender: TObject);
    procedure SetParameters(APenColor, ABrushColor: TColor; AWidth: Integer;
      ABrushStyle: TFPBrushStyle; APenStyle: TFPPenStyle);
    procedure MouseDown(X, Y: integer); virtual; abstract;
    procedure MouseMove(X, Y: integer); virtual; abstract;
    procedure MouseUp(X, Y: integer;
      AWidth, AHeight: Integer);        virtual; abstract;
    procedure Init(APanel: Tpanel);     virtual; abstract;
  end;

  THandTool = class(TTool)
    FCurrentPoint: TDoublePoint;
    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;

  TZoomInTool = class(TTool)
    FCurrentPoint: TDoublePoint;
    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;

  TZoomOutTool = class(TTool)
    FCurrentPoint: TDoublePoint;
    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;

  TPolyLineTool = class(TTool)

    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;

  TRectangleTool = class(TTool)
    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;

  TPolygonTool = class(TTool)
    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;

  TEllipseTool = class(TTool)
    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;

  TLineTool = class(TTool)
    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;

  TZoomToTool = class(TTool)
    FFirstPoint, FSecondPoint: TDoublePoint;
    constructor Create;
    procedure MouseDown(X, Y: integer); override;
    procedure MouseMove(X, Y: integer); override;
    procedure MouseUp(X, Y: integer; AWidth, AHeight: Integer);   override;
    procedure Init(APanel: Tpanel);     override;
  end;



var
  ToolRegistry: array of TTool;

implementation

  { TTool }

procedure RegisterTool(Tool: TTool);
begin
  SetLength(ToolRegistry, Length(ToolRegistry) + 1);
  ToolRegistry[High(ToolRegistry)] := Tool;
end;

function TTool.GetFigure: TFigure;
begin
  Result := Figure;
end;

procedure TTool.SetParameters(APenColor, ABrushColor: TColor; AWidth: Integer;
      ABrushStyle: TFPBrushStyle; APenStyle: TFPPenStyle);
begin
  Figure.PenColor := APenColor;
  Figure.BrushColor := ABrushColor;
  Figure.Width := AWidth;
  Figure.BrushStyle := ABrushStyle;
  Figure.PenStyle := APenStyle;
end;

procedure TTool.SetLabel(APanel: TPanel; ACaption: string);
begin
  TextLabel := TLabel.Create(APanel);
  with TextLabel do begin
    Parent := APanel;
    AutoSize := false;
    Width:= 40;
    Height:=18;
    OptimalFill := true;
    Left := 0;
    Top := 2;
    Align := alBottom;
    Caption:=ACaption;
  end;
end;

  { Width }

procedure TTool.SetWidthProperty(APanel: TPanel);
begin
  WidthEdit := TSpinEdit.Create(APanel);
  With WidthEdit do begin
    Parent := APanel;
    Top := 2;
    Left := 2;
    MinValue := 1;
    MaxValue := 100;
    Align:=alBottom;
    BorderSpacing.Around:=5;
    OnChange:= @WidthEditChange;
  end;
  SetLabel(APanel, 'Width: ');
  Thickness := 1;
end;

procedure TTool.WidthEditChange(Sender: TObject);
begin
  Thickness := WidthEdit.Value;
end;

  { BrushStyle }

procedure TTool.SetBrushStyleProperty(APanel: TPanel);
begin
  SetLabel(APanel, 'BrushStyle: ');
  BrushStyleCombobox := TComboBox.Create(APanel);
  With BrushStyleCombobox do begin
    Parent := APanel;
    Width := 87;
    Top := 2;
    Left:=2;
    Align:=alBottom;
    BorderSpacing.Around:=5;
    with Items do begin
      Add('Сплошная');
      Add('Без заливки');
      Add('Горизонтальная');
      Add('Вертикальная');
      Add('Диагональная 1');
      Add('Диагональная 2');
      Add('Крестом');
      Add('Наклонным крестом');
    end;
    OnChange  := @BrushStyleComboboxChange;
    ItemIndex := 0;
  end;
  BrushStyle := bsSolid;
end;

procedure TTool.BrushStyleComboboxChange(Sender: TObject);
begin
  BrushStyle := TFPBrushStyle(BrushStyleCombobox.ItemIndex);
end;

  { PenStyle }

procedure TTool.SetPenStyleProperty(APanel: TPanel);
begin
  PenStyleCombobox := TComboBox.Create(APanel);
  With PenStyleCombobox do begin
    Parent := APanel;
    Top := 2;
    Left:=2;
    Width := 87;
    Align:=alBottom;
    BorderSpacing.Around:=5;
    with Items do begin
      Add('________');
      Add('─ ─ ─ ─ ─');
      Add('• • • • • • • • •');
      Add('─ • ─ • ─ •');
      Add('─ • • ─ • •');
    end;
    OnChange  := @PenStyleComboboxChange;
    ItemIndex := 0;
  end;
  SetLabel(APanel, 'PenStyle ');
  PenStyle := psSolid;
end;

procedure TTool.PenStyleComboboxChange(Sender: TObject);
begin
  PenStyle := TFPPenStyle(PenStyleCombobox.ItemIndex);
end;

  { NumberOfAngles }

procedure TTool.SetNumbefOfAngles(APanel: TPanel);
begin
  SetLabel(APanel, 'Angles: ');
  AnglesEdit := TSpinEdit.Create(APanel);
  With AnglesEdit do begin
    Parent := APanel;
    Top := 2;
    Left := 2;
    MinValue := 3;
    MaxValue := 15;
    Align:=alBottom;
    BorderSpacing.Around:=5;
    OnChange:= @AnglesEditChange;
  end;
  NumberOfAngles := 3;
end;

procedure TTool.AnglesEditChange(Sender: TObject);
begin
  NumberOfAngles := AnglesEdit.Value;
end;

  { TZoomInTool }

constructor TZoomInTool.Create;
begin
  Inherited;
  FIcon := 'imgs/ZoomIn.bmp';
end;

procedure TZoomInTool.MouseDown(X, Y: integer);
begin
  FCurrentPoint := ScreenToWorld(X, Y);
end;

procedure TZoomInTool.MouseMove(X, Y: integer);
begin
  FCurrentPoint := ScreenToWorld(X, Y);
end;

procedure TZoomInTool.MouseUp(X, Y: integer; AWidth, AHeight: Integer);
begin
  if scale * 2 <= 100 then begin
    Scale := Scale * 2;
    ChangeScreenCoords(
      FCurrentPoint.X - ScreenToWorldX(X),
      FCurrentPoint.Y - ScreenToWorldY(Y));
  end;
end;

procedure TZoomInTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := False;
end;

  { TZoomOutTool }

constructor TZoomOutTool.Create;
begin
  Inherited;
  FIcon := 'imgs/ZoomOut.bmp';
end;

procedure TZoomOutTool.MouseDown(X, Y: integer);
begin
  FCurrentPoint := ScreenToWorld(X, Y);
end;

procedure TZoomOutTool.MouseMove(X, Y: integer);
begin
  FCurrentPoint := ScreenToWorld(X, Y);
end;

procedure TZoomOutTool.MouseUp(X, Y: integer; AWidth, AHeight: Integer);
begin
  if scale / 2 >= 0.01 then begin
    Scale := Scale / 2;
    ChangeScreenCoords(
      FCurrentPoint.X - ScreenToWorldX(X),
      FCurrentPoint.Y - ScreenToWorldY(Y));
  end;
end;

procedure TZoomOutTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := False;
end;

  { TZoomToTool }

constructor TZoomToTool.Create;
begin
  Inherited;
  FIcon := 'imgs/ZoomTo.bmp';
end;

procedure TZoomToTool.MouseDown(X, Y: integer);
begin
  Figure := TFrame.Create;
  (Figure as TFrame).AddFirstPoint(X, Y);
  FFirstPoint := ScreenToWorld(X, Y);
end;

procedure TZoomToTool.MouseMove(X, Y: integer);
var
  i : integer;
begin
  (Figure as TFrame).AddSecondPoint(X, Y);
  FSecondPoint := ScreenToWorld(X, Y);
end;

procedure TZoomToTool.MouseUp(X, Y: integer; AWidth, AHeight: Integer);
var
  ZoomWidth, ZoomHeigth, MidX, MidY: Double;
begin
  (Figure as TFrame).AddSecondPoint(X, Y);
  ZoomWidth := abs(FSecondPoint.X - FFirstPoint.X);
  ZoomHeigth := abs(FSecondPoint.Y - FFirstPoint.Y);
  MidX := min(FFirstPoint.X, FSecondPoint.X);
  MidY := min(FFirstPoint.Y, FSecondPoint.Y);
  Scale := Min(AWidth / ZoomWidth, AHeight / ZoomHeigth);
  UScale.SetScreenCoords(MidX, MidY);
  Figure := nil;
end;

procedure TZoomToTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := False;
end;

  { THandTool }

constructor THandTool.Create;
begin
  Inherited;
  FIcon := 'imgs/Hand.bmp';
end;

procedure THandTool.MouseDown(X, Y: integer);
begin
  FCurrentPoint := ScreenToWorld(X, Y);
end;

procedure THandTool.MouseMove(X, Y: integer);
begin
  ChangeScreenCoords(
    FCurrentPoint.X - ScreenToWorldX(X),
    FCurrentPoint.Y - ScreenToWorldY(Y));
end;

procedure THandTool.MouseUp(X, Y: integer; AWidth, AHeight: Integer);
begin
  ChangeScreenCoords(
    FCurrentPoint.X - ScreenToWorldX(X),
    FCurrentPoint.Y - ScreenToWorldY(Y));
end;

procedure THandTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := False;
end;

  { TPolylineTool }

constructor TPolyLineTool.Create;
begin
  Inherited;
  FIcon := 'imgs/PolyLine.bmp';
end;

procedure TPolyLineTool.MouseDown(X, Y: Integer);
begin
  Figure := TPolyline.Create;
  (Figure as TPolyline).AddPoint(X, Y);
end;

procedure TPolyLineTool.MouseMove(X, Y: Integer);
begin
  (Figure as TPolyline).AddPoint(X, Y);
end;

procedure TPolyLineTool.MouseUp(X, Y: Integer; AWidth, AHeight: Integer);
begin
  (Figure as TPolyline).AddPoint(X, Y);
end;

procedure TPolylineTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := True;
  SetWidthProperty(APanel);
  SetPenStyleProperty(APanel);
  APanel.Height := 18*2 + 10 + 23*2+10;
end;

  { TRectangleTool }

constructor TRectangleTool.Create;
begin
  Inherited;
  FIcon := 'imgs/Rectangle.bmp';
end;

procedure TRectangleTool.MouseDown(X, Y: Integer);
begin
  Figure := TRectangle.Create;
  (Figure as TRectangle).AddFirstPoint(X, Y);
end;

procedure TRectangleTool.MouseMove(X, Y: Integer);
begin
  (Figure as TRectangle).AddSecondPoint(X, Y);
end;

procedure TRectangleTool.MouseUp(X, Y: Integer; AWidth, AHeight: Integer);
begin
  (Figure as TRectangle).AddSecondPoint(X, Y);
end;

procedure TRectangleTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := True;
  SetWidthProperty(APanel);
  SetPenStyleProperty(APanel);
  SetBrushStyleProperty(APanel);
  APanel.Height := 18*3 + 15 + 23*3+15;
end;

  { TPolygonTool }

constructor TPolygonTool.Create;
begin
  Inherited;
  FIcon := 'imgs/Rectangle.bmp';
end;

procedure TPolygonTool.MouseDown(X, Y: Integer);
begin
  Figure := TPolygon.Create;
  (Figure as TPolygon).AddFirstPoint(X, Y);
end;

procedure TPolygonTool.MouseMove(X, Y: Integer);
begin
  (Figure as TPolygon).AddSecondPoint(X, Y);
end;

procedure TPolygonTool.MouseUp(X, Y: Integer; AWidth, AHeight: Integer);
begin
  (Figure as TPolygon).AddSecondPoint(X, Y);
end;

procedure TPolygonTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := True;
  SetWidthProperty(APanel);
  SetNumbefOfAngles(APanel);
  SetPenStyleProperty(APanel);
  SetBrushStyleProperty(APanel);
  APanel.Height := 18*4 + 40 + 23*4;
end;

  { TEllipseTool }

constructor TEllipseTool.Create;
begin
  Inherited;
  FIcon := 'imgs/Ellipse.bmp';
end;

procedure TEllipseTool.MouseDown(X, Y: Integer);
begin
  Figure := TEllipse.Create;
  (Figure as TEllipse).AddFirstPoint(X, Y);
end;

procedure TEllipseTool.MouseMove(X, Y: Integer);
begin
  (Figure as TEllipse).AddSecondPoint(X, Y);
end;

procedure TEllipseTool.MouseUp(X, Y: Integer; AWidth, AHeight: Integer);
begin
  (Figure as TEllipse).AddSecondPoint(X, Y);
end;

procedure TEllipseTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := True;
  SetWidthProperty(APanel);
  SetPenStyleProperty(APanel);
  SetBrushStyleProperty(APanel);
  APanel.Height := 18*3 + 15 + 23*3+15;
end;

  { TLineTool }

constructor TLineTool.Create;
begin
  Inherited;
  FIcon := 'imgs/Line.bmp';
end;

procedure TLineTool.MouseDown(X, Y: Integer);
begin
  Figure := TLine.Create;
  (Figure as TLine).AddFirstPoint(X, Y);
end;

procedure TLineTool.MouseMove(X, Y: Integer);
begin
  (Figure as TLine).AddSecondPoint(X, Y);
end;

procedure TLineTool.MouseUp(X, Y: Integer; AWidth, AHeight: Integer);
begin
  (Figure as TLine).AddSecondPoint(X, Y);
end;

procedure TLineTool.Init(APanel: Tpanel);
begin
  ParametersAvailable := True;
  SetWidthProperty(APanel);
  SetPenStyleProperty(APanel);
  APanel.Height := 18*2 + 10 + 23*2+10;
end;

initialization
  RegisterTool(THandTool.Create);
  RegisterTool(TPolyLineTool.Create);
  RegisterTool(TRectangleTool.Create);
  RegisterTool(TEllipseTool.Create);
  RegisterTool(TLineTool.Create);
  RegisterTool(TZoomInTool.Create);
  RegisterTool(TZoomOutTool.Create);
  RegisterTool(TZoomToTool.Create);
  RegisterTool(TPolygonTool.Create);
end.

